name: Expo Preview

on:
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened]

jobs:
  expo-preview:
    name: Expo Preview Build
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.pull_request.labels.*.name, 'skip-preview') }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Setup Expo CLI
        run: npm install -g @expo/cli

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm run test:ci

      - name: Create Expo account
        run: |
          expo whoami || expo login --non-interactive
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

      - name: Publish to Expo for Preview
        run: |
          expo publish --non-interactive --max-workers 1
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

      - name: Comment PR with preview link
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('Expo Preview')
            );

            const body = `## ðŸ“± Expo Preview

            Your app is ready for preview! 

            **Expo Go App:** 
            - Scan the QR code with the Expo Go app
            - Or open this link: \`exp://exp.host/@${process.env.EXPO_USERNAME}/clock?release-channel=pr-${context.issue.number}\`

            **Web Preview:** 
            - [Open in browser](https://expo.dev/@${process.env.EXPO_USERNAME}/clock?release-channel=pr-${context.issue.number})

            > This preview will be available until the PR is merged or closed.`;

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }
        env:
          EXPO_USERNAME: ${{ secrets.EXPO_USERNAME }}
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
